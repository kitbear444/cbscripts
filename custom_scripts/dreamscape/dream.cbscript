dir "C:\Users\dcwil\AppData\Roaming\PrismLauncher\instances\Latest Snapshot\minecraft\saves\New World (1)"
desc "Dreamscape datapack...reminiscent of lucid blocks"
scale 1

import common
import random

import inv_storage
import items
import dim_change

$PERCENT_CHANCE = 100

$Dimensions = [
    "minecraft:overworld",
    "minecraft:the_nether",
    "minecraft:the_end",
]

$Dreams = [
    "$namespace:dream1",
    "$namespace:dream2",
    "$namespace:sky",
]

# This advancement triggers the '_on_sleep_start' function
advancement player_slept {
    criteria: {
        slept: {
            trigger: "minecraft:slept_in_bed"
        }
    },
    rewards: {
        "function": "$namespace:_on_sleep_start"
    }
}

reset
    global_reset()
end

function global_reset()
    /say Dreamscape reset!

    ## Set up scoreboard objectives
    # Resets objectives
    /scoreboard objectives remove hasSlept
    /scoreboard objectives remove sinceDeath
    # FIX: Probably shouldn't reset this one in particular, since the game will lose context of players in dreams or not
    #/scoreboard objectives remove inDream

    # Creates objectives
    /scoreboard objectives add hasSlept minecraft.custom:minecraft.time_since_rest
    /scoreboard objectives add sinceDeath minecraft.custom:minecraft.time_since_death
    /scoreboard objectives add death minecraft.custom:minecraft.deaths
    /scoreboard objectives add inDream dummy
    # Sets every players value to 2 just to bypass the 1 check later
    /scoreboard players set @a hasSlept 2
    # Sets every players value to 2 just to bypass the 1 check later
    /scoreboard players set @s sinceDeath 2
end

# This function is the reward for the advancement
function _on_sleep_start()
    # "Flag" the player so we know they are sleeping
    @s.justSlept = 1
    
    # Revoke the advancement so it can be granted again next time
    /advancement revoke @s only $namespace:player_slept
end

# Handles when a player sleeps
function _handle_sleep()
    @s.ran_number = get_random_number()
    if @s.ran_number <= $PERCENT_CHANCE
        # Store the players inventory
        store()
        # Clear the players inventory for the new dimension
        clear_inventory()
        # Put player in random dream dimension
        @s.dream_idx = get_random_dimension()
        switch @s.dream_idx
            case $i in $range($len($Dreams))
                $dream = $Dreams[$i]
                /execute in $dream run spreadplayers ~ ~ 0 5 false @s
            end
        end
        # Identify them as dreaming
        @s.inDream = 1
    end
    @s.justSlept = 0
end

# Handles when a player wakes up
function _handle_wake_up()
    # Restore the players inventory
    restore()
    # Identify them as no longer dreaming
    @s.inDream = 0
end

# Handles immediately when a player dies in a dream
function _handle_dream_death()
    # Removes death dropped items if keepInventory = false
    at @s as @s
        clear_inventory()
        /kill @e[type=minecraft:item,distance=..4]
    end
    # Sets players num of deaths back to 0
    @s.death = 0
end

# run every tick
clock tick
    as @a
        if @s.hasSlept == 1 and @s.justSlept == 1
            # Actually teleports the player
            _handle_sleep()
        end

        if @s.death == 1 and @s.inDream == 1
            # Run when the player dies, but before they wake up
            _handle_dream_death()
        end

        if @s.sinceDeath == 1 and @s.inDream == 1
            # Wakes the player up (in this case, due to death)
            _handle_wake_up()
        end
    end
end

# Just a handy function just for me
function clear_chat()
    for i=1 to 20
        /tellraw @a {text:""}
    end 
end

# Clears the inventory of the running player
function clear_inventory()
    as @s
        /clear
    end
end

# Generates random number between 0 and 100
function get_random_number()
    return randint(0, 100)
end

# Pick random dimension
function get_random_dimension()
    $dreams_len = $len($Dreams)
    return randint(0, $dreams_len)
end

# For testing purposes only
function test()
    /say Testing Dreamscape...
end