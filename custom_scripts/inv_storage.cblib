# Allows for storing and loading inventory
# Note: relies on scoreboard ID system, sets it up if not already set up

$EQUIPMENT_SLOTS = [
    -106,
    100,
    101,
    102,
    103,
]

reset
    # Backs up player data
    backup_data()

    # Erases the this data in the inv namespace
    /data remove storage $namespace:inv players
    /data remove storage $namespace:inv this

    # Creates ID scoreboard
    /scoreboard objectives add ID dummy
    # Counter for setting player IDs
    count = 0

    # Creates dummy Slot
    /scoreboard objectives add Slot dummy
    # Revokes first time advancement so each player is reassigned an ID
    /advancement revoke @a only $namespace:first_join 
end

function init()
    reset()
end

advancement first_join {
	criteria: {
		requirement: {
			trigger: "minecraft:tick"
        }
	},
	rewards: {
		"function": "$namespace:set_id"
	}
}

# Sets ID for each player
function set_id()
    @s.ID = count
    count++
end

# Stores the running player's current inventory
function storing()
    # Erases the "this" root for the inv namespace
    /data remove storage $namespace:inv this
    # Stores data in temporary "this" root key
    /data modify storage $namespace:inv this.Inventory set from entity @s Inventory
    this.ID = @s.ID
    # Executes storing_update with the ID macro
    with
        $(ID) = @s.ID
    do
        storing_update() with macros
    end

    # Clean up this just in case
    /data remove storage $namespace:inv this
end

# Updates the storage key for the player 
function storing_update()
    # Creates a key in the $namespace:inv storage that is a player array that keys on the players' ID, and skips if that player already exists
    /$execute unless data storage $namespace:inv players[{ID:$(ID)}] run data modify storage $namespace:inv players append value {ID:$(ID)}
    # Appends "this" data structure to the players array by ID
    /data modify storage $namespace:inv players[{ID:$(ID)}] merge from storage $namespace:inv this
end

# Returns the players inventory to them
function returning()
    with
        $(ID) = @s.ID
    do
        # Reading the selected player's data from the entire array of data of all players.
        returning_read() with macros
    end
    
    for i=1 to 41
        # This command runs 'returning_item' *only* if the
        # storage list still has an item (Inventory[0]).
        /execute if data storage $namespace:inv this.Inventory[0] run function $namespace:returning_item with storage $namespace:inv this.Inventory[0]
    end

    # Delete stored player's data
    with
        $(ID) = @s.ID
    do
        /$data remove storage $namespace:inv players[{ID:$(ID)}]
    end
end


# Grabs the inventory data AND restores it to the player
function returning_read()
    # Erases the this root for the inv namespace
    /data remove storage $namespace:inv this
    # Grab the player's saved data from storage
    /$data modify storage $namespace:inv this set from storage $namespace:inv players[{ID:$(ID)}]
end

# Handles formatting the item data, and then adds the item to the player's inventory depending on the type
function returning_item()
    # Sets components if it isn't set for an item
    /execute unless data storage $namespace:inv this.Inventory[0].components run data modify storage $namespace:inv this.Inventory[0].components set value {}
    
    # Store the Slot NBT in the temp value per player
    /$scoreboard players set @s Slot $(Slot)

    # If a normal item slot, use the returning_inventory function, otherwise it is equipment
    with
        $(Slot) = @s.Slot
    do
        switch @s.Slot
            case $i in $range(0, 35)
                /say adding normal item
                /function $namespace:returning_inventory with storage $namespace:inv this.Inventory[0]
            end
            case $i in $EQUIPMENT_SLOTS
                /say adding equipment
                /function $namespace:returning_equipment with storage $namespace:inv this.Inventory[0]
            end
        end
    end
    # After returning the current item, remove this slot from storage and start returning the next item
    /data remove storage $namespace:inv this.Inventory[0]
end

# Handles returning normal items
function returning_inventory()
    /$loot replace entity @s container.$(Slot) loot {pools:[{rolls:1,entries:[{type:"minecraft:item",name:"$(id)",functions:[{function:"minecraft:set_count",count:$(count)},{function:"minecraft:set_components",components:$(components)}]}]}]}
end

# Handles the special equipment slots
function returning_equipment()
    with
        $(Slot) = @s.Slot
    do
        switch @s.Slot
            case -106
                # Adds to offhand
                /$loot replace entity @s weapon.offhand loot {pools:[{rolls:1,entries:[{type:"minecraft:item",name:"$(id)",functions:[{function:"minecraft:set_count",count:$(count)},{function:"minecraft:set_components",components:$(components)}]}]}]}
            end
            case 100
                # Adds to boots slot
                /$loot replace entity @s armor.feet loot {pools:[{rolls:1,entries:[{type:"minecraft:item",name:"$(id)",functions:[{function:"minecraft:set_count",count:$(count)},{function:"minecraft:set_components",components:$(components)}]}]}]}
            end
            case 101
                # Adds to leggings slot
                /$loot replace entity @s armor.legs loot {pools:[{rolls:1,entries:[{type:"minecraft:item",name:"$(id)",functions:[{function:"minecraft:set_count",count:$(count)},{function:"minecraft:set_components",components:$(components)}]}]}]}
            end
            case 102
                # Adds to chest slot
                /$loot replace entity @s armor.chest loot {pools:[{rolls:1,entries:[{type:"minecraft:item",name:"$(id)",functions:[{function:"minecraft:set_count",count:$(count)},{function:"minecraft:set_components",components:$(components)}]}]}]}
            end
            case 103
                # Adds to helmet slot
                /$loot replace entity @s armor.head loot {pools:[{rolls:1,entries:[{type:"minecraft:item",name:"$(id)",functions:[{function:"minecraft:set_count",count:$(count)},{function:"minecraft:set_components",components:$(components)}]}]}]}
            end
        end
    end
end

# Backups the latest player data on reset...just in case
function backup_data()
    # Grab the player's saved data from storage
    /data modify storage $namespace:inv_bk players set from storage $namespace:inv players[{ID:$(ID)}]
end